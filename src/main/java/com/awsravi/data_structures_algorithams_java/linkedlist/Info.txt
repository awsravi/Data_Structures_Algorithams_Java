1)Remove Dups
  Write a method to remove duplicates from an unsorted linked list.

  Example

  linkedList = 1->2->1->3
  deleteDups(linkedList)
  //Output
  1->2->3

2)Return Nth to Last
  Implement and algorithm to find the nth to last element of a singly linked list.

  Example

  linkedList = 1->2->3->4-5
  deleteDups(linkedList, 2)
  //Output
  4

3)Partition
  Write code to partition a linked list around a value x, such that all nodes less than x come before all nodes greater than or equal to x.

  Example

  Input: 1 -> 9 -> 5  -> 10 -> 2  [x=4]

  Output: 2 -> 1 -> 9 -> 5 -> 10

4)Sum Lists
  You have two numbers represented by a linked list, where each node contains a single digit. The digits are stored in reverse order, such that the 1's digit is at the head of the list. Write a function that adds the two numbers and returns the sum as a linked list.

  list1 = 7 -> 1 -> 6
  list2 =  5 -> 9 -> 2
  result = 2 -> 1 -> 9

5)Intersection
  Given two (singly) linked lists, determine if the two lists intersect. Return the intersecting node. Note that the intersection is defined based on reference, not value. That is, if the kth node of the first linked list is the exact same node (by reference) as the jth node of the second linked list, then they are intersecting.
  Example

     LinkedList llA = new LinkedList();
     llA.insertNode(3);
     llA.insertNode(1);
     llA.insertNode(5);
     llA.insertNode(9);
     LinkedList llB = new LinkedList();
     llB.insertNode(2);
     llB.insertNode(4);
     llB.insertNode(6);
     Exercise ex = new Exercise();
     ex.addSameNode(llA, llB, 7);
     ex.addSameNode(llA, llB, 2);
     ex.addSameNode(llA, llB, 1);
     Node inter = ex.findIntersection(llA, llB);
     System.out.println(inter.value);

  // 7

6)
