1)Three in One
  Describe how you could use a single Array to implement three stacks.

2)Stack Minimum
  How would you design a stack which, in addition to push and pop, has a function min which returns the minimum element? Push, pop and min should all operate in O(1).

3)Stack of Plates
  Imagine a (literal) stack of plates. If the stack gets too high, it might topple. Therefore, in real life, we would likely start a new stack when the previous stack exceeds some threshold. Implement a data structure SetOfStacks that mimics this. SetOfStacks should be composed of several stacks and should create a new stack once the previous one exceeds capacity, SetOfStacks.push() and SetOfStacks.pop() should behave identically to a single stack (that is, pop( ) should return the same values as it would if there were just a single stack).

  Follow Up:

  Implement a function popAt (int index) which performs a pop operation on a specific sub - stack.

Examples:
SetOfStacks newStack = new SetOfStacks(3);
newStack.push(1);
newStack.push(2);
newStack.push(3);
newStack.push(4);
newStack.push(5);
newStack.popAt(0); //3
newStack.popAt(0); //4

4)Queue via Stacks
  Implement Queue class which implements a queue using two stacks.

5)Animal Shelter
  An animal shelter, which holds only dogs and cats, operates on a strictly "first in, first out" basis. People must adopt either the "oldest" (based on arrival time) of all animals at the shelter, or they can select whether they would prefer a dog or a cat (and will receive the oldest animal of that type). They cannot select which specific animal they would like. Create the data structures to maintain this system and implement operations such as enqueue, dequeueAny, dequeueDog, and dequeueCat.

  Example

  AnimalQueue animals = new AnimalQueue();
  animals.enqueue(new Cat("Kiki"));
  animals.enqueue(new Cat("Kari"));
  animals.enqueue(new Dog("Beji"));
  animals.enqueue(new Cat("Reki"));
  animals.enqueue(new Dog("Dexter"));

  animals.dequeueAny().name();
  animals.dequeueDogs().name();
  animals.dequeueCats().name();

  //Output
  Cat: Kiki
  Dog: Beji
  Cat: Kari

6)Implement Stack
  Implement a Stack class. The class should be initialized with a given value which would be the value of the first node in the stack. Specifications: Inner Node Class: Attributes: value: An integer that stores the value of the node. next: A Node type that points to the next node in the stack.

  Stack class: Should accept an integer value to initialize the value attribute. Stack Class: Attributes: top: A private Node type that points to the top node of the stack. height: A private integer that keeps track of the number of elements in the stack. Constructor: Accepts an integer value as the initial value for the stack. Initializes the top with a new Node containing the given value. Sets the height to 1.

7)Push Method
  Develop a method named push to place a new node with a specified value at the peak of the stack.

  Return type: void

  The method should complete these steps:

  Receive a numerical value (integer) which is assigned to the new node.

  Generate a new Node entity named addedNode using the specified value.

  In case the stack's length is 0, adjust the peak reference to the addedNode.

  For stacks with a depth exceeding 0, execute these steps:

  a. Direct the next reference of the addedNode towards the current peak node.

  b. Modify the peak reference to indicate the addedNode.

  Augment the length value of the stack by one unit.

8)Pop Method
  Develop a method named pop for a stack that executes the following:

  When the stack is empty (height is 0), it should return null.

  Capture the topmost node of the stack in a variable named temp.

  Reassign the stack's top to the second node in the stack.

  Detach the temp node from the stack by setting its next attribute to null.

  Decrease the stack's height by one.

  Finally, return the temp node, which is the node that was removed from the stack.

  Expected Output: The method should return a Node type, specifically the one that was last popped from the stack.    Firstly, let's define a basic Node class:

9)Balanced Parentheses Checker
  Given an expression string, write a Java program to check whether the parentheses in the expression are balanced or not. The types of parentheses to consider are curly {}, square [], and round ().

  Hint: Using stacks for parsing and balancing symbols.

